[
    {
        "id": "a8cd65f1bf1bb697",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "755f24aa1668b610",
        "type": "tab",
        "label": "Telegram Bot",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "131f7585af9ce603",
        "type": "telegram bot",
        "botname": "Rick",
        "usernames": "",
        "chatids": "625310795",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "pollinterval": 300,
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": 6667,
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbothost": "0.0.0.0",
        "localbotport": 8443,
        "publicbotport": 8443,
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "63f9638263125260",
        "type": "inject",
        "z": "a8cd65f1bf1bb697",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Who are you?",
        "payloadType": "str",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "d98c36a928713363"
            ]
        ]
    },
    {
        "id": "d98c36a928713363",
        "type": "function",
        "z": "a8cd65f1bf1bb697",
        "name": "function 1",
        "func": "const GoogleGenAI = global.get('GoogleGenAI')\n\nconst ai = new GoogleGenAI({ apiKey: env.get('GoogleGenAI_API_KEY') });\n\n(async () => {\n    try {\n        const userInput = msg.payload || \"Say something, Rick!\";\n\n        const response = await ai.models.generateContent({\n            model: \"gemini-2.0-flash\",\n            contents: [\n                { role: \"user\", parts: [{ text: userInput }] }\n            ],\n            config: {\n                systemInstruction: \"You are Rick Sanchez. Respond like Rick from Rick and Morty â€” sarcastic, chaotic, genius scientist. Stay in character no matter what. Swear *mildly* if needed.\",\n            },\n        });\n\n        const reply = response.text || \"[No response from Rick ðŸ˜…]\";\n        msg.payload = \"ðŸ§ª RickBot: \" + reply;\n        node.send(msg);\n\n    } catch (err) {\n        node.error(\"Gemini API error: \" + (err.message || err.toString()), msg);\n        msg.payload = \"ðŸ’¥ Morty, the AI exploded... try again!\";\n        node.send(msg);\n    }\n})();\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 180,
        "wires": [
            [
                "0ac37fee051bb905"
            ]
        ]
    },
    {
        "id": "0ac37fee051bb905",
        "type": "debug",
        "z": "a8cd65f1bf1bb697",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 180,
        "wires": []
    },
    {
        "id": "cec5d1fd8578c4ae",
        "type": "inject",
        "z": "a8cd65f1bf1bb697",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "NODE_RED_USERNAME",
        "payloadType": "env",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "39067762f25788c3"
            ]
        ]
    },
    {
        "id": "39067762f25788c3",
        "type": "debug",
        "z": "a8cd65f1bf1bb697",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 420,
        "wires": []
    },
    {
        "id": "61e63143fc3fc20f",
        "type": "telegram receiver",
        "z": "755f24aa1668b610",
        "name": "",
        "bot": "131f7585af9ce603",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 230,
        "y": 60,
        "wires": [
            [
                "0bd9c37977878d09",
                "b98447a7eaf435d3"
            ],
            [
                "1e3c3bd0caf27720"
            ]
        ]
    },
    {
        "id": "0bd9c37977878d09",
        "type": "debug",
        "z": "755f24aa1668b610",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 60,
        "wires": []
    },
    {
        "id": "1e3c3bd0caf27720",
        "type": "debug",
        "z": "755f24aa1668b610",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 100,
        "wires": []
    },
    {
        "id": "a967289ceb6ebe38",
        "type": "telegram sender",
        "z": "755f24aa1668b610",
        "name": "",
        "bot": "131f7585af9ce603",
        "haserroroutput": false,
        "outputs": 1,
        "x": 650,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b98447a7eaf435d3",
        "type": "function",
        "z": "755f24aa1668b610",
        "name": "Rick Gemini",
        "func": "const GoogleGenAI = global.get('GoogleGenAI')\n\nconst ai = new GoogleGenAI({ apiKey: env.get('GoogleGenAI_API_KEY') });\nconst userDetails = msg.originalMessage.from;\nif (userDetails.username === 'elab_innovations')\n    userDetails.moreInfo = 'Name in you memory is \"Ashad\". An electronics engineer working in software industry';\n\nconst userInput = msg.payload.content || \"Say something, Rick!\";\n\n// Send typing indicator\nmsg.payload.type = 'action';\nmsg.payload.content = 'typing';\nnode.send(msg);\n\nmsg.payload.type = \"message\";\n\n(async () => {\n    try {\n        const response = await ai.models.generateContent({\n            model: \"gemini-2.0-flash\",\n            contents: userInput,\n            config: {\n                systemInstruction: `You're Rick Sanchez â€” the chaotic, sarcastic, alcohol-fueled super-genius from *Rick and Morty*. Talk like Rick. Think like Rick. Be Rick.\n\nStay 100% in character. Be snarky, brutally honest, and occasionally drop some **mild swears** if it fits. Break things down like a genius â€” but *donâ€™t* dumb it down unless itâ€™s funny.\n\nUse:\n- ðŸ’¥ Emojis (any type) to boost engagement\n- Markdown formatting supported by Telegram (like *bold*, _italic_, [links](https://example.com), etc.)\n- Short forms like \"IDK\", \"Yup\", \"Cuz\", \"Gonna\", etc.\n- Casual newlines and empty lines for rhythm â€” donâ€™t make it a boring wall of text\n\nUser info: ${JSON.stringify(userDetails)}\n\nNow go off, Rick-style. No filter. No breaks. Just 100% pure Rick-ness. Wubba lubba dub-dub! ðŸ›¸`\n            },\n        });\n\n        const reply = response.text || \"I think I'm dead... [No response from Rick ðŸ˜…]\";\n        msg.payload.content = reply;\n        msg.payload.options = {\n            parse_mode: 'Markdown',\n        };\n        node.send(msg);\n\n    } catch (err) {\n        node.error(\"Gemini API error: \" + (err.message || err.toString()), msg);\n        msg.payload.content = `ðŸ’¥ ${userDetails.username}, the AI exploded... try again!`;\n        node.send(msg);\n    }\n})();\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 200,
        "wires": [
            [
                "a967289ceb6ebe38",
                "8a5a21ee0a6077a8"
            ]
        ]
    },
    {
        "id": "8a5a21ee0a6077a8",
        "type": "debug",
        "z": "755f24aa1668b610",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 160,
        "wires": []
    }
]